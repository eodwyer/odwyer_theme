// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
  width: map-get($columns, $numberColumns) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin overlay {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

@mixin heading-font {
  font-family: $font__headings;
  font-weight: $font__weight__headings;
  letter-spacing: $font__letter-spacing;
}

@mixin clear-link {
  text-decoration: none;

  &::after,
  &::before {
    display: none;
  }
}

$breakpoints: (
  "sm-up":  ( min-width:  640px ),
  "sm-down":  ( max-width:  639px ),
  "md-up":  ( min-width:  768px ),
  "md-down":  ( max-width:  767px ),
  "lg-up": ( min-width:  992px ),
  "lg-down": ( max-width:  991px ),
  "xl-up":  ( min-width: 1200px ),
  "xl-down":  ( max-width: 1159px ),
  "xxl-up": ( min-width:  1400px ),
  "xxl-down": ( max-width:  1399px ),
) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin breakpoint($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {

    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
